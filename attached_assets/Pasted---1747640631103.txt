Принято. Я соберу концептуальные архитектуры и лучшие практики для построения системы управления законодательством с версионностью как в GitHub, встроенной аналитикой и верификацией на основе действующих законов Республики Казахстан. Основные требования: работа на русском языке, локально размещённые открытые модели (например, Mistral, LLaMA), использование Agent Smith или подобного фреймворка агентов, и исключение галлюцинаций путём повышенной точности и логической интерпретируемости.

Я подготовлю архитектуру, предложу технологический стек, способы контроля версий, методики проверки соответствия и объяснимости решений модели. Сообщу, когда всё будет готово.


# Концептуальные архитектуры и лучшие практики для системы управления законодательством РК

Современная система управления законодательством должна сочетать традиционные ИТ-подходы (слойную архитектуру, версии, XML-стандарты) с технологиями ИИ (RAG-подходы, графы знаний, интеллектуальные агенты и т.д.). Общая архитектура может состоять из **нескольких слоев**: слой интерфейса пользователя (веб-портал, чат), бизнес-логики (аналитические сервисы), слой ИИ и поиска (LLM, RAG, KG), а также слой хранения данных (база юридических текстов, графовая БД, векторное хранилище). В такой системе запросы пользователей проходят через службу **извлечения знаний (RAG)**: входной запрос преобразуется в вектор и выполняется семантический поиск по корпусу законов или узлам графа знаний. Найденные фрагменты документов вместе с запросом передаются генеративной модели (например, LLaMA или Mistral) для получения обоснованного ответа. Важно, что RAG-архитектуры **анкерят ответы в источниках**, что значительно снижает «галлюцинации» LLM.

&#x20;*Рисунок 1.* Традиционная RAG-архитектура: входящий запрос разбивается на фрагменты, кодируется в векторы, из векторного хранилища извлекаются наиболее релевантные фрагменты закона, после чего LLM генерирует ответ на основе этого контекста. Этот подход соединяет **поисковую** и **генеративную** компоненты и гарантирует привязку ответа к нормативным текстам.

Для повышения надежности и объяснимости целесообразно использовать **интеллектуальную агентную архитектуру**. Модели (агенты) могут быть специализированы на разных задачах: поиск норм, проверка соответствия, подготовка резюме изменений и т.д. Агентный подход позволяет разделить функционал на микросервисы («агенты»), которые взаимодействуют через API или прослойку оркестрации (например, LangChain, AgentSmith-подобные фреймворки). Каждый агент может вызывать векторный поиск, SPARQL-запросы по графу или логические модули и передавать результаты в LLM. Такой **агентно-ориентированный RAG** обеспечивает гибкость и расширяемость: например, один агент может отвечать за поиск по графу знаний, другой – за верификацию через правила, а третий – за генерацию ответов.

&#x20;*Рисунок 2.* Граф-ориентированный RAG (GraphRAG): объединение векторного поиска и графового поиска. На входе – неструктурированные тексты (законы, статьи) и структурированные источники (КСО, CSV). Сбор данных включает разбиение текста на фрагменты (chunking), разрешение сущностей (Named Entity Resolution) и формирование графа знаний. При запросе извлекаются релевантные фрагменты и связанные сущности из графа, которые передаются LLM для генерации ответа. Такой подход улучшает семантику поиска и позволяет строить многоскорневые запросы, сохраняя прослеживаемость решения (ответ можно связать с конкретными узлами графа).

## База знаний законодательства РК

Для построения базы знаний необходимо **структурировать и аннотировать** корпус действующего законодательства. Рекомендуется использовать **открытые стандарты XML** (например, Akoma Ntoso или аналоги) для разметки нормативных актов (законов, кодексов, подзаконных актов) по статьям, параграфам и т.д. После разметки текст можно дополнительно обогащать семантикой через **онтологии** и классификаторы. Например, можно применять онтологию соответствующих юридических понятий (наподобие Lynx Document Ontology или национальных классификаторов) для формализации связей: понятия и их свойства (основания, условия) связываются с конкретными нормами.

Построение графа знаний (Knowledge Graph) из законов включает выделение ключевых сущностей (законы, статьи, лица, даты, нормативные терминологии) и связей между ними (упоминания, дополнения, изменения). Схема графа может использовать стандарты URI/URN (как в Eunomos) для идентификации фрагментов документов. Например, каждый закон и его статьи получают уникальные URN-идентификаторы (с учетом органа издателя, даты, номера и версии), что позволяет автоматически связывать ссылки на нормы и правки между документами. Наличие единой онтологии норм (НIR-уровень или локальный аналог) упрощает семантическую валидацию: можно задать правила, например, «запрет постановления без закона-основания» или «прецедентное толкование по определенным статьям».

Для управления терминологией полезно ввести **юридические классификаторы и словари** (например, по темам права или признакам нормы). При поступлении нового закона система может автоматически метить его ключевые слова и темы. В **Eunomos** для классификации норм использовался метод SVM: каждому новому актам назначался домен, а статьи распределялись по тематикам. Также можно применять современные NLP-технологии: векторизацию статей и кластеризацию тем, или вручную расширяемый тезаурус юридических понятий.

Наконец, важно использовать **многоуровневую архитектуру данных**. Данные преобразуются в модульный XML (DITA/AkomaNtoso), затем аннотируются в RDF/OWL с помощью онтологии, а затем хранятся в графовой БД (например, Neo4j) и в векторном хранилище для семантического поиска. Такое семантическое обогащение повышает точность поиска и уменьшает «мысли»: LLM получает подготовленный контекст и тратит меньше ресурсов на анализ необработанного текста. При этом граф знаний облегчает объяснимость результатов – можно проследить цепочку выводов через связи сущностей.

## Версионирование и отслеживание изменений

Система должна поддерживать **контроль версий** законодательных актов и проектов. Рекомендуется использовать Git-подобные технологии: хранить нормы в текстовом или XML-формате в репозитории (GitLab/GitHub), где каждая редакция, поправка или новый проект фиксируется как коммит. Аналогично EU, существует открытый инструмент LEOS – веб-сервис для совместного редактирования законопроектов, основанный на Akoma Ntoso и встроенном контроле версий. В такой системе можно видеть «diff» между версиями актов и легко откатываться к предыдущим редакциям.

Однако необходимо учитывать специфику права: поправки в законах часто задаются инструкциями («в статье 10 слова “…” считать утратившими силу, добавить…»), а не полными новыми текстами. Стандартные diff-инструменты не подходят: требуется анализ «семантического» изменения, а не просто символов. Поэтому систему контроля версий нужно дополнить модулем интерпретации поправок (инструмент типа LegisLinker или кастомный парсер поправок), который автоматически «прокладывает» изменения в древовидной структуре документа.

Трудности такого подхода хорошо описаны: например, в США Кодекс был загружен на GitHub лишь как зеркало, поскольку сами законодатели не используют git в процессе, и без этого «участие публики через GitHub» малоэффективно. Несмотря на это, преимущества Git как хранилища неизменны: он обеспечивает прозрачный журнал изменений и позволяет привязать каждую правку к автору или органу, упрощая аудит и отслеживание эволюции законодательства.

В таблице сведем возможные решения для версионирования и их плюсы/минусы:

| Подход                           | Преимущества                                   | Недостатки                                                   |
| -------------------------------- | ---------------------------------------------- | ------------------------------------------------------------ |
| Git (XML/Markdown)               | История коммитов, интеграция CI/CD, открытость | Сложно обрабатывать юридические правки, нужен спец. парсер   |
| Веб-CMS или DMS                  | Пользовательский интерфейс, гибкость настроек  | Версионирование «через глаза», нет стандарта diff            |
| Устройство «законопроекта в PDF» | Простота загрузки                              | Полный отказ от контроля версий, нельзя анализировать правки |

## Сравнение и верификация новых законопроектов

Главная задача – автоматическая проверка соответствия нового законопроекта действующему законодательству по семантике и логике. Предлагаются следующие механизмы:

* **Семантический анализ и поиск пересечений.** Каждое положение законопроекта конвертируется в вектор (embedding) и сравнивается с векторами действующих норм (классификация и поиск ближайших соседей по косинусной схеме). Так можно находить параллели по содержанию (например, похожие темы, противоречия или утративающие силу нормы). Дополнительно используется граф: например, если новый текст упоминает концепты, связанные в графе (сущности и их свойства), система может найти связанные нормы и проверить их изменения.

* **Лексический и структурный diff.** На основе XML-структуры (статья, пункт) можно делать « юридическое сравнение»: искать слова-маркеры («обязан», «не менее», «не позднее») и отличия в логических операторах, которые влияют на смысл нормы. При обнаружении изменения терминологии система может выдать предупреждения («заменено ключевое понятие»). Один из подходов – применение правил семантической валидации: например, если закон вводит термин, которого нет в классификаторе, или использует противоречивое определение, LLM-агент сигнализирует о возможной ошибке.

* **Логическая верификация.** При наличии формальных онтологий и логических правил (например, согласование с Конституцией или основными кодексами) можно проверять непротиворечивость: формализовать нормы в виде логических утверждений (деонтическая логика) и пропускать их через правила вывода. Традиционно в подобных системах (проект Eunomos) применяются классы норм и правила вывода, однако общедоступные решения редки. В рамках агентной архитектуры можно поручить LLM или специализированному агенту формулировать «цепочку рассуждений»: например, «закон противоречит статье X другого закона», опираясь на граф отношений и правила онтологии.

* **Экспертная проверка.** Любой автоматический вывод следует подкреплять ссылками на нормативные акты. RAG-система по запросу может выдавать фрагменты исходного законодательства, где найдены совпадения или рассогласования. Это обеспечивает объяснимость: например, LLM ответит «проект изменяет термин “обязан” на “может”, что может ослабить норму, см. актуальную статью 5». Такой подход гарантирует, что модель дает не просто «мнение», а опирается на тексты законов.

## Инструменты и модели

Выбор технологий обусловлен требованиями безопасности, точности и открытости:

* **Языковые модели:** Предпочтительнее **открытые LLM** (например, LLaMA 2, Mistral или специализированные русскоязычные модели типа Vikhr). Они могут работать в закрытом контуре (без передачи данных в облако) и подвергаться дообучению на казахстанских нормативных текстах. Vikhr как раз показывает, что ориентированная на русский LLM (9B или 13B) может превосходить закрытые модели по ряду задач. Модель необходимо донастроить на корпусе законов РК и обучить форматам запрос-ответ в юридической области.

* **Графовые и векторные хранилища:** Для базы знаний подходят **Neo4j** или аналогичные графовые СУБД (где строится KG с юридическими сущностями) и **Milvus/Pinecone/Weaviate** для векторного поиска по текстам законов. Системы хранения должны поддерживать быструю обратную связь при семантическом поиске.

* **Фреймворки агента:** Для организации нескольких агентов можно использовать LangChain, AgentSmith (адаптированный под свои LLM), AutoGPT-подобные решения или разрабатывать собственную автобирку запросов и ответов. Фреймворк должен позволять агенту вызывать функции: поиск в графе (SPARQL), векторный поиск, специализированные правила, а затем агрегировать результат.

* **Семантические технологии:** Применяются RDF-онтологии, SPARQL для запросов к KG и инструменты типа Protégé для управления онтологиями норм. Например, онтология может описывать связи «закон–должностное лицо», «термин–определение» и т.д., что помогает проверять консистентность.

* **Explainable AI:** Для объяснимости (XAI) используется сочетание RAG (выдача выдержек из законов) и цепочек рассуждений (chain-of-thought prompts). Модель на каждом шаге должна указывать, на каких статьях/пунктах базируется ответ. Это можно усилить семантической валидацией: если LLM предлагает утверждение, система проверяет его через правила KG или дополнительные LLM-запросы («Какие законы подтверждают этот вывод?»).

Таким образом, **каждый модуль обоснован выбором технологий**. Привязка к законам достигается через RAG и онтологии, надежность — через верифицированные источники и схему контроля версий, а интерпретируемость — через цитаты и графовые пути доказательств.

## Сравнение подходов

| Компонент                  | Решения                                                   | Преимущества                                                   | Недостатки                                                     |
| -------------------------- | --------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- |
| **Хранилище и поиск**      | Граф+вектор (Neo4j + Milvus) vs чистый текст/SQL          | Комбинированный RAG: точные семантические поиски, объяснимость | Сложность интеграции, высокие затраты на инфраст.              |
| **Онтологии и KB**         | Единая онтология норм vs простая таксономия               | Строгая семантика, дедуктивная проверка                        | Требует разработки и поддержки, долго обучается                |
| **Контроль версий**        | Git (AkomaNtoso, LEOS) vs CMS-документооборот             | Прозрачность истории, открытость                               | Юр. тексты с лингвистическими правками тяжело мержить          |
| **LLM-модели**             | LLaMA2/Mistral/Vikhr vs GPT/Cohere                        | Локальный запуск, кастомизация, поддержка русского             | Меньше «корректны» по дефолту, треб. дообучения                |
| **Фреймворки агентов**     | LangChain/AutoGPT vs монолитный чат-бот                   | Модульность, возможность расширения                            | Сложнее проектировать и отлаживать                             |
| **Версификация изменений** | Автоматизированный анализ «strike/insert» vs обычный diff | Глубокий семантический контроль, связка с KG                   | Значительные усилия по NLP-парсингу, нет стандартных решений   |
| **Объяснимость (XAI)**     | RAG с подсказками chain-of-thought vs «черный ящик»       | Ответы со ссылками на законы, более надежные выводы            | Модели могут быть медленнее, сложно интерпретировать полностью |

Итоговая архитектура представляет собой **многослойную, агентно-ориентированную систему с RAG-подходом и семантическим графом знаний**. Это сочетание лучших практик (версионирование Git-подобное, онтологии и нормализованные данные, RAG и LLM, XAI через цитаты) позволит надежно управлять и анализировать законодательство РК, минимизируя ошибки и галлюцинации модели.

**Источники:** современные исследования по RAG и правовым ИИ, система Eunomos, опыт практик контроля версий для законов, а также данные о доступных LLM для русского языка.
